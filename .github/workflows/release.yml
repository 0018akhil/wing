name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Release
    timeout-minutes: 5
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
      SEGMENT_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: pnpm install

      - name: Release
        run: pnpm run release "[HEAD^1]"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist
            console/*/dist

      - name: Check for new commits
        id: git_remote
        run: echo "latest_commit=$(git ls-remote origin -h ${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT

      - name: Extract Version
        id: extract-version
        if: ${{ failure() }}
        run: echo "VERSION=$(cat dist/releasetag.txt)" >> $GITHUB_OUTPUT

      - name: Create Issue
        if: ${{ failure() }}
        uses: imjohnbo/issue-bot@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          labels: failed-release
          title: Release ${{ steps.extract-version.outputs.VERSION }} failed
          body: See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  create_github_release:
    name: Create GitHub Release
    timeout-minutes: 5
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist

      - name: Pack the Console for the Playground
        run: tar cvf playground-console.tgz console

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.PROJEN_GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF playground-console.tgz 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi

      - name: Extract version
        id: extract-version
        if: ${{ failure() }}
        run: echo "VERSION=$(cat dist/releasetag.txt)" >> $GITHUB_OUTPUT

      - name: Create issue
        if: ${{ failure() }}
        uses: imjohnbo/issue-bot@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          labels: failed-release
          title: Publishing ${{ steps.extract-version.outputs.VERSION }} to GitHub Releases failed
          body: See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  publish_console_for_desktop:
    name: Publish Console for Desktop
    timeout-minutes: 15
    needs: release
    runs-on: ghcr.io/cirruslabs/macos-ventura-xcode:latest
    permissions:
      contents: write
      issues: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist

      - name: Add certificate to the keychain
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |-
          echo $CSC_LINK | base64 --decode > $HOME/certificate.p12
          security create-keychain -p $CSC_KEY_PASSWORD build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $CSC_KEY_PASSWORD build.keychain
          security import $HOME/certificate.p12 -k build.keychain -P $CSC_KEY_PASSWORD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $CSC_KEY_PASSWORD build.keychain

      - name: Bundle Console for Desktop
        run: pnpm run bundle
        working-directory: console/app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Release to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.RELEASE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.RELEASE_AWS_SECRET_ACCESS_KEY }}
        run: pnpm exec tsx scripts/releaseToS3.mts
        working-directory: console/app

      - name: Extract version
        id: extract-version
        if: ${{ failure() }}
        run: echo "VERSION=$(cat dist/releasetag.txt)" >> $GITHUB_OUTPUT

      - name: Create issue
        if: ${{ failure() }}
        uses: imjohnbo/issue-bot@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          labels: failed-release
          title: Publishing Wing Console for Desktop ${{ steps.extract-version.outputs.VERSION }} failed
          body: See https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
